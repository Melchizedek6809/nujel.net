[defn include-resource* [ctx path dest-path]
  [tree/set! [tree/ref ctx :resources-needed] [string->keyword path] [cons path dest-path]]
  dest-path]

[export apply
        [defn ssg/theme/apply [ctx path]
          "Apply a theme to a particular file in PATH"
          [def theme [tree/ref ctx :theme]]
          [import [apply :as theme/apply] theme]
          [theme/apply ctx path]]]

[defn theme/split/rec [theme-text start ret]
      ""
      [def i [index-of theme-text "{{" start]]
      [if [< i 0]
          [if [not= start 0]
              [cons [string/cut theme-text start] ret]
              [cons theme-text ret]]
          [do [def end-i [index-of theme-text "}}" i]]
              [when [< end-i 0] [exception "Unpaired Brackets in theme" theme-text]]
              [cons! [string/cut theme-text start i] ret]
              [cons! [cons 'do [read [string/cut theme-text [+ i 2] end-i]]] ret]
              [theme/split/rec theme-text [+ end-i 2] ret]]]]

[defn theme/split [theme-text]
      "Split a theme into separate strings and expressions for every {{ }} block."
      [nreverse [theme/split/rec theme-text 0 #nil]]]

[export parse-content
        [defn ssg/theme/parse-content [ctx path raw-content *page-meta*]
          ""
          [defn page-meta! m
            "Sets the current pages meta data like the :title"
            [while m
              [when-not [cdr m] [exception "page-meta! needs key value pairs" m]]
              [tree/set! *page-meta* [car m] [cadr m]]
              [set! m [cddr m]]]
            #nil]
          [eval [cons 'cat [theme/split raw-content]]]]]


[export parse
        [defn ssg/theme/parse [+theme-path+ raw-theme-text]
          "Parse a theme and return a function that can be called with a ctx and path to apply that theme to some content"
          [def theme-parts [cons 'cat [theme/split raw-theme-text]]]
          [def theme-form `[fn [ctx path]
                               [def *page-meta* @[]]
                               [def content [ssg/theme/parse-content ctx path [slurp path] *page-meta*]]

                               [defn include-resource [res-path]
                                 [include-resource* ctx [fmt "{+theme-path+}/{res-path}"] res-path]]
                               [defn page-title []
                                 [def ct [ref *page-meta* :title]]
                                 [if ct
                                     [fmt "{} - {}" [ref ctx :title] ct]
                                     [ref ctx :title]]]
                               ~theme-parts]]
          [eval theme-form]]]
