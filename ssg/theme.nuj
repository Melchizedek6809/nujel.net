[import [build :as navigation/build] "navigation"]

[def themes @[]]
[defn add-theme [name mod]
      [tree/set! themes name [module/load mod [current-closure]]]]

[defn load-builtin-themes [ctx]
      :export
      [add-theme :default [module/load "./theme/default" [current-closure]]]
      [return ctx]]

[defn include-resource* [ctx path dest-path]
  [tree/set! [tree/ref ctx :resources-needed] [string->keyword path] [cons path dest-path]]
  dest-path]

[defn load-components [ctx]
      :export
      [import [load-components :as theme/load-components] [tree/ref themes [tree/ref ctx :theme]]]
      [theme/load-components ctx]
      ctx]

[defn render [ctx path]
      :export
      "Apply a theme to a particular file in PATH"
      [def theme [tree/ref themes [tree/ref ctx :theme]]]
      [import [render :as cur/render load-components] theme]
      [load-components ctx]
      [cur/render ctx path]]

[defn theme/split/rec [theme-text start ret]
      [def i [index-of theme-text "{{" start]]
      [if [< i 0]
          [if [not= start 0]
              [cons [string/cut theme-text start] ret]
              [cons theme-text ret]]
          [do [def end-i [index-of theme-text "}}" i]]
              [when [< end-i 0] [exception "Unpaired Brackets in theme" theme-text]]
              [cons! [string/cut theme-text start i] ret]
              [cons! [cons 'do [read [string/cut theme-text [+ i 2] end-i]]] ret]
              [theme/split/rec theme-text [+ end-i 2] ret]]]]

[defn theme/split [theme-text]
      "Split a theme into separate strings and expressions for every {{ }} block."
      [nreverse [theme/split/rec theme-text 0 #nil]]]

[defn split-frontmatter [raw]
      "Return a dotted pair of the frontmatter and content part from a raw piece of content"
      :export
      [def in [trim raw]]
      [def start [index-of in "+++"]]
      [when [not= start 0]
        [return [cons "" in]]]
      [def end [index-of in "+++" 3]]
      [when [< end 0]
        [return [cons "" in]]]
      [cons [trim [string/cut in 3 end]]
            [trim [string/cut in [+ 3 end]]]]]

[defn frontmatter [text]
      "Return the frontmatter, if found, from some content"
      :export
      [car [split-frontmatter text]]]

[defn strip-frontmatter [text]
      "Remove the frontmatter, if found, from some content"
      :export
      [cdr [split-frontmatter text]]]

[defn parse-content [ctx path raw-content *page-meta*]
      "Parses content, evaluating all embedded Nujel forms"
      :export
      [defn render-link [target]
            [render-link* ctx path target]]
      [defn get-href [target]
            [get-href* ctx path target]]
      [defn navigation [depth]
            [navigation/build ctx depth]]
      [eval [cons 'cat [theme/split raw-content]]]]

[defn parse-frontmatter [fm]
      ""
      :export
      [def expr [read fm]]
      [apply tree/new expr]]

[def *cur-page-theme-path* #nil]
[def *cur-page-ctx* #nil]
[def *cur-page-path* #nil]
[def *cur-page-meta* #nil]
[defn set-page-ctx! [ctx path meta theme-path]
      [when *cur-page-ctx* [exception "Double set page ctx" ctx]]
      [set! *cur-page-theme-path* theme-path]
      [set! *cur-page-ctx* ctx]
      [set! *cur-page-meta* meta]
      [set! *cur-page-path* path]]

[defn reset-page-ctx! []
      [when-not *cur-page-ctx* [exception "Double unset page ctx" #nil]]
      [set! *cur-page-ctx* #nil]
      [set! *cur-page-meta* #nil]
      [set! *cur-page-path* #nil]]

[defn get-ctx [] *cur-page-ctx*]
[defn get-path [] *cur-page-path*]
[defn get-meta [] *cur-page-meta*]
[defn get-theme-path [] *cur-page-theme-path*]

[defn get-href* [ctx path target]
      [def name [string/cut path [inc [length [tree/ref ctx :content-root-dir]]]]]
      [def depth [- [length [split name "/"]] 1]]
      [def href [if [tree? target]
                    [tree/ref target :href]
                    target]]
      [dotimes [i depth href]
        [set! href [cat "../" href]]]]

[defn render-link* [ctx path target]
      [if [string? target]
          [render-link* ctx path [tree/ref [tree/ref ctx :frontmatter] [string->keyword target]]]
          [fmt "<a href=\"{}\">{}</a>"
               [get-href* ctx path target]
               [if [tree? target]
                   [or [tree/ref target :nav-title]
                       [tree/ref target :title]]
                   target]]]]

[defn render-link [target]
      [render-link* [get-ctx] [get-path] target]]

[defn get-href [target]
      [get-href* [get-ctx] [get-path] target]]

[defn navigation [depth]
      [navigation/build [get-ctx] depth]]

[defn include-resource [res-path]
      [include-resource* [get-ctx] [fmt "{}/{res-path}" [get-theme-path]] res-path]
      [get-href res-path]]

[defn page-title []
      [def ct [ref [get-meta] :title]]
      [if ct
          [fmt "{} - {}" [ref [get-ctx] :title] ct]
          [ref [get-ctx] :title]]]

[defn this-href []
      [string/cut [get-path] [inc [length [tree/ref [get-ctx] :content-root-dir]]]]]

[defn this-prev-next []
      [tree/ref [tree/ref [get-ctx] :prev-next-nav]
                [string->keyword [this-href]]]]

[defn this-prev []
      [and [this-prev-next]
           [tree/ref [this-prev-next] :prev]]]

[defn this-next []
      [and [this-prev-next]
           [tree/ref [this-prev-next] :next]]]

[defn component [name args]
      [[tree/ref [tree/ref [get-ctx] :components] name] args]]

[defn add-component [ctx name raw-text]
      :export
      [tree/set! [tree/ref ctx :components] name [parse-component raw-text]]]

[defn parse-component [raw-text]
      :export
      [def theme-parts [cons 'cat [theme/split raw-text]]]
      [eval `[fn [args] ~theme-parts]]]

[defn parse [+theme-path+ raw-theme-text]
      :export
      "Parse a theme and return a function that can be called with a ctx and path to apply that theme to some content"
      [def theme-parts [cons 'cat [theme/split raw-theme-text]]]
      [def theme-form `[fn [ctx path]
                           [def page-parts [split-frontmatter [slurp path]]]
                           [set-page-ctx! ctx path [parse-frontmatter [car page-parts]] +theme-path+]
                           [def content [parse-content ctx path [cdr page-parts] [get-meta]]]
                           [def ret ~theme-parts]
                           [reset-page-ctx!]
                           [return ret]]]
      [eval theme-form]]
