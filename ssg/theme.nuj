[import [build :as navigation/build] "navigation"]

[def themes @[]]
[defn add-theme [name mod]
      [tree/set! themes name [module/load mod [current-closure]]]]

[defn load-builtin-themes [ctx]
      :export
      [add-theme :default [module/load "./theme/default" [current-closure]]]
      [return ctx]]

[defn include-resource* [ctx path dest-path]
  [tree/set! [tree/ref ctx :resources-needed] [string->keyword path] [cons path dest-path]]
  dest-path]

[defn render [ctx path]
      :export
      "Apply a theme to a particular file in PATH"
      [def theme [tree/ref themes [tree/ref ctx :theme]]]
      [import [render :as cur/render] theme]
      [cur/render ctx path]]

[defn theme/split/rec [theme-text start ret]
      [def i [index-of theme-text "{{" start]]
      [if [< i 0]
          [if [not= start 0]
              [cons [string/cut theme-text start] ret]
              [cons theme-text ret]]
          [do [def end-i [index-of theme-text "}}" i]]
              [when [< end-i 0] [exception "Unpaired Brackets in theme" theme-text]]
              [cons! [string/cut theme-text start i] ret]
              [cons! [cons 'do [read [string/cut theme-text [+ i 2] end-i]]] ret]
              [theme/split/rec theme-text [+ end-i 2] ret]]]]

[defn theme/split [theme-text]
      "Split a theme into separate strings and expressions for every {{ }} block."
      [nreverse [theme/split/rec theme-text 0 #nil]]]

[defn split-frontmatter [raw]
      "Return a dotted pair of the frontmatter and content part from a raw piece of content"
      :export
      [def in [trim raw]]
      [def start [index-of in "+++"]]
      [when [not= start 0]
        [return [cons "" in]]]
      [def end [index-of in "+++" 3]]
      [when [< end 0]
        [return [cons "" in]]]
      [cons [trim [string/cut in 3 end]]
            [trim [string/cut in [+ 3 end]]]]]

[defn frontmatter [text]
      "Return the frontmatter, if found, from some content"
      :export
      [car [split-frontmatter text]]]

[defn strip-frontmatter [text]
      "Remove the frontmatter, if found, from some content"
      :export
      [cdr [split-frontmatter text]]]

[defn parse-content [ctx path raw-content *page-meta*]
      "Parses content, evaluating all embedded Nujel forms"
      :export
      [defn render-link [target]
            [render-link* ctx path target]]
      [defn get-href [target]
            [get-href* ctx path target]]
      [defn navigation [depth]
            [navigation/build ctx depth]]
      [eval [cons 'cat [theme/split raw-content]]]]

[defn parse-frontmatter [fm]
      ""
      :export
      [def expr [read fm]]
      [apply tree/new expr]]

[defn get-href* [ctx path target]
      [def name [string/cut path [inc [length [tree/ref ctx :content-root-dir]]]]]
      [def depth [- [length [split name "/"]] 1]]
      [def href [if [tree? target]
                    [tree/ref target :href]
                    target]]
      [dotimes [i depth href]
        [set! href [cat "../" href]]]]

[defn render-link* [ctx path target]
      [if [string? target]
          [render-link* ctx path [tree/ref [tree/ref ctx :frontmatter] [string->keyword target]]]
          [fmt "<a href=\"{}\">{}</a>"
               [get-href* ctx path target]
               [if [tree? target]
                   [or [tree/ref target :nav-title]
                       [tree/ref target :title]]
                   target]]]]

[defn parse [+theme-path+ raw-theme-text]
      :export
      "Parse a theme and return a function that can be called with a ctx and path to apply that theme to some content"
      [def theme-parts [cons 'cat [theme/split raw-theme-text]]]
      [def theme-form `[fn [ctx path]
                           [def parts [split-frontmatter [slurp path]]]
                           [def *page-meta* [parse-frontmatter [car parts]]]
                           [def content [parse-content ctx path [cdr parts] *page-meta*]]
                           [def this-href [string/cut path [inc [length [tree/ref ctx :content-root-dir]]]]]
                           [def this-prev-next [tree/ref [tree/ref ctx :prev-next-nav] [string->keyword this-href]]]
                           [def this-prev [and this-prev-next [tree/ref this-prev-next :prev]]]
                           [def this-next [and this-prev-next [tree/ref this-prev-next :next]]]

                           [defn render-link [target]
                                 [render-link* ctx path target]]
                           [defn get-href [target]
                                 [get-href* ctx path target]]
                           [defn navigation [depth]
                                 [navigation/build ctx depth]]
                           [defn include-resource [res-path]
                                 [include-resource* ctx [fmt "{+theme-path+}/{res-path}"] res-path]
                                 [get-href res-path]]
                           [defn page-title []
                                 [def ct [ref *page-meta* :title]]
                                 [if ct
                                     [fmt "{} - {}" [ref ctx :title] ct]
                                     [ref ctx :title]]]
                           ~theme-parts]]
      [eval theme-form]]
