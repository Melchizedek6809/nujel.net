(import (build :as navigation/build) "navigation")

(def themes {})

(defn Nujel (source)
      (import (pp-nujel) :pretty/nujel)
      (pp-nujel source :html))

(defn add-theme (name mod)
      (tree/set! themes name (module/load mod (current-closure))))

(defn load-builtin-themes (ctx)
      :export
      (add-theme :default (module/load "./theme/default" (current-closure)))
      (return ctx))

(defn include-resource* (ctx path dest-path)
      (tree/set! (ref ctx :resources-needed) (string->keyword path) (cons path dest-path))
      (return dest-path))

(defn load-components (ctx)
      :export
      (import (init :as theme/init)
              (ref themes (ref ctx :theme)))
      (theme/init ctx)
      ctx)

(defn render (ctx path)
      :export
      "Apply a theme to a particular file in PATH"
      (def theme (ref themes (ref ctx :theme)))
      (import (render :as cur/render load-components) theme)
      (load-components ctx)
      (cur/render ctx path))

(defn theme/split/rec (theme-text start ret)
      (def i (index-of theme-text "{{" start))
      (if (< i 0)
          (if (not= start 0)
              (cons (string/cut theme-text start) ret)
              (cons theme-text ret))
          (do (def end-i (index-of theme-text "}}" i))
              (when (< end-i 0) (exception "Unpaired Brackets in theme" theme-text))
              (cons! (string/cut theme-text start i) ret)
              (cons! (cons 'do (read (string/cut theme-text (+ i 2) end-i))) ret)
              (theme/split/rec theme-text (+ end-i 2) ret))))

(defn theme/split (theme-text)
      "Split a theme into separate strings and expressions for every {{ }} block."
      (nreverse (theme/split/rec theme-text 0 #nil)))

(defn split-frontmatter (raw)
      "Return a dotted pair of the frontmatter and content part from a raw piece of content"
      :export
      (def in (trim raw))
      (def start (index-of in "+++"))
      (when (not= start 0)
        (return (cons "" in)))
      (def end (index-of in "+++" 3))
      (when (< end 0)
        (return (cons "" in)))
      (cons (trim (string/cut in 3 end))
            (trim (string/cut in (+ 3 end)))))

(defn frontmatter (text)
      "Return the frontmatter, if found, from some content"
      :export
      (car (split-frontmatter text)))

(defn strip-frontmatter (text)
      "Remove the frontmatter, if found, from some content"
      :export
      (cdr (split-frontmatter text)))

(defn get-frontmatter (path name raw-fm)
      :export
      (def fm (parse-frontmatter raw-fm))
      (when-not (tree/has? fm :type) (tree/set! fm :type :page))
      (tree/set! fm :href name)
      (tree/set! fm :depth (- (length (split name "/")) 1))
      (return fm))

(defn parse-content (ctx path raw-content *page-meta*)
      "Parses content, evaluating all embedded Nujel forms"
      :export
      (try (fn (err)
             (efmtln "Error while rendering {path}"))
           (eval (cons 'cat (theme/split raw-content)))))

(defn parse-frontmatter (fm)
      ""
      :export
      (def expr (read fm))
      (apply tree/new expr))

(def *cur-component-path* #nil)
(def *cur-page-ctx* #nil)
(def *cur-page-path* #nil)
(def *cur-page-meta* #nil)
(defn set-page-ctx! (ctx path meta theme-path)
      (when *cur-page-ctx* (exception "Double set page ctx" ctx))
      (set! *cur-page-ctx* ctx)
      (set! *cur-page-path* path)
      (set! *cur-page-meta* meta))

(defn reset-page-ctx! ()
      (when-not *cur-page-ctx* (exception "Double unset page ctx" #nil))
      (set! *cur-page-ctx* #nil)
      (set! *cur-page-path* #nil)
      (set! *cur-page-meta* #nil))

(defn get-ctx () *cur-page-ctx*)
(defn get-path () *cur-page-path*)
(defn get-meta () *cur-page-meta*)

(defn get-component-path () (return *cur-component-path*))
(defn set-component-path! (new-path)
      (set! *cur-component-path* new-path))

(defn urlescape (in)
      (with-string-port out
                        (dotimes (i (buffer/length in))
                          (def c (ref in i))
                          (case c
                                (#\# (out 'block-write "%23"))
                                (#\& (out 'block-write "%26"))
                                (#\? (out 'block-write "%3F"))
                                (otherwise (out 'char-write c))))))

(defn get-href* (ctx path target)
      (def name (string/cut path (inc (length (ref ctx :content-root-dir)))))
      (def depth (- (length (split name "/")) 1))
      (def href (if (tree? target)
                    (ref target :href)
                    target))
      (dotimes (i depth (urlescape href))
        (set! href (cat "../" href))))

(defn render-link* (ctx path target)
      (if (string? target)
          (render-link* ctx path (ref (ref ctx :frontmatter) (string->keyword target)))
          (fmt "<a href=\"{}\" class=\"{}\">{}</a>"
               (get-href* ctx path target)
               (do (def classes #nil)
                   (def tags (and (tree? target) (ref target :tags)))
                   (doseq (tag tags) (cons! (cat "tag-" (keyword->string tag)) classes))
                   (join classes " "))
               (if (tree? target)
                   (or (ref target :nav-title)
                       (ref target :title))
                   target))))

(defn render-link (target)
      (render-link* (get-ctx) (get-path) target))

(defn get-href (target)
      (get-href* (get-ctx) (get-path) target))

(defn navigation (depth prefix category)
      (navigation/build (get-ctx) depth prefix category))

(defn get-posts ()
      (def ret #nil)
      (doseq (p (tree/values (ref (get-ctx) :frontmatter)) ret)
             (when (== :post (ref p :type))
               (cons! p ret))))

(defn include-resource (res-path)
      (include-resource* (get-ctx)
                         (fmt "{}/{res-path}" (get-component-path))
                         res-path)
      (get-href res-path))

(defn page-title ()
      (def ct (ref (get-meta) :title))
      (if ct
          (fmt "{} - {}" (ref (get-ctx) :title) ct)
          (ref (get-ctx) :title)))

(defn this-href ()
      (string/cut (get-path) (inc (length (ref (get-ctx) :content-root-dir)))))

(defn this-prev-next ()
      (ref (ref (get-ctx) :prev-next-nav)
                (string->keyword (this-href))))

(defn this-prev ()
      (and (this-prev-next)
           (ref (this-prev-next) :prev)))

(defn this-next ()
      (and (this-prev-next)
           (ref (this-prev-next) :next)))

(defn component (name props children)
      (def component-fun (ref (ref (get-ctx) :components) name))
      (when-not component-fun (exception "Can't find a component called: " name))
      (try (fn (err)
             (efmtln "Error while rendering component {name}"))
           (component-fun props children)))

(defn template (name props children)
      (def template-fun (ref (ref (get-ctx) :templates) (or name :page)))
      (when-not template-fun (exception "Can't find a template named: " name))
      (try (fn (err)
             (efmtln "Error while rendering theme {name}"))
           (template-fun props children)))

(defn add-component (ctx name raw-text component-path)
      :export
      (tree/set! (ref ctx :components)
                 name
                 (parse-component raw-text component-path)))

(defn add-template (ctx name raw-text component-path)
      :export
      (tree/set! (ref ctx :templates)
                 name
                 (parse-component raw-text component-path)))

(defn parse-component (raw-text component-path)
      :export
      (def theme-parts (cons 'cat (theme/split raw-text)))
      (eval `(fn (props children)
                 (def old-component-path (get-component-path))
                 (set-component-path! component-path)
                 (def ret ~theme-parts)
                 (set-component-path! old-component-path)
                 (return ret))))

(defn render (ctx path meta raw-content)
      :export
      (set-page-ctx! ctx path meta)
      (def ret "")
      (try (fn (err)
               (efmtln "Error while rendering {path}")
             (efmtln "{err:?}"))
           (def content (parse-content ctx path raw-content meta))
           (set! ret (template (ref (get-meta) :type) meta content)))
      (reset-page-ctx!)
      (return ret))
