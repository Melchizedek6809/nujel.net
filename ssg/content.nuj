[import [build :as loader/build mkdir-safe get-out-path] "loader"]
[import [render parse-frontmatter frontmatter get-frontmatter] "theme"]

[defn add-resources [ctx]
      :export
      "Copy all resources used over"
      [def deploy-dir [tree/ref ctx :deploy-dir]]
      [doseq [res [tree/values [tree/ref ctx :resources-needed]] ctx]
             [mkdir [fmt "{deploy-dir}/{}" [path/dirname [cdr res]]]]
             [file/copy [car res] [fmt "{deploy-dir}/{}" [cdr res]]]]]

[defn path/content? [path]
      [= [lower-case [path/extension path]] "html"]]

[defn load-frontmatter [path name content-frontmatter]
      [when-not [path/content? path] [return #nil]]
      [def fm [get-frontmatter path name [frontmatter [slurp path]]]]
      [tree/set! content-frontmatter [string->keyword name] fm]]

[defn build-content [ctx path content-frontmatter build-fun]
      [when [file/file? [cat path "/config.nuj"]]
        [set! ctx [tree/merge ctx [file/eval [cat path "/config.nuj"]]]]]
      [doseq [c [directory/read-relative path] ctx]
             [if [file/dir? c]
                 [build-content ctx c content-frontmatter build-fun]
                 [build-fun ctx c content-frontmatter]]]]

[defn queue-content* [ctx base-path out-path fm content-fun]
      [def path [cat base-path out-path]]
      [def href [string/cut path [inc [length [tree/ref ctx :content-root-dir]]]]]
      [tree/set! fm :href href]
      [tree/set! fm :depth [- [length [split [tree/ref fm :href] "/"]] 1]]
      [tree/set! [tree/ref ctx :frontmatter] [string->keyword href] fm]
      [tree/set! [tree/ref ctx :generator-queue] [string->keyword href] @[:path path :meta fm :fun content-fun]]]


[defn generate-content [ctx]
      "Generate all autogenerated content"
      :export
      [build-content ctx
                     [tree/ref ctx :content-root-dir]
                     [tree/ref ctx :frontmatter]
                     [fn [ctx path content-frontmatter]
                         [when-not [== [path/basename path] "generator.nuj"]
                                   [return #nil]]
                       [def base-path [cat [path/dirname path] "/"]]
                       [defn queue-content [out-path fm content-fun]
                             [queue-content* ctx base-path out-path fm content-fun]]
                       [file/eval path [current-closure]]]]]


[defn build-frontmatter-index [ctx]
      "Load all the frontmatters and look generate datastructures necessary for building navigations"
      :export
      [def content-frontmatter @[]]
      [build-content ctx
                     [tree/ref ctx :content-root-dir]
                     content-frontmatter
                     [fn [ctx path content-frontmatter]
                         [load-frontmatter path
                                           [string/cut path [inc [length [tree/ref ctx :content-root-dir]]]]
                                           content-frontmatter]]]
      [tree/set! ctx :frontmatter content-frontmatter]]

[defn build-ctx [ctx]
      "Build everything"
      :export
      [build-content ctx
                     [tree/ref ctx :content-root-dir]
                     [tree/ref ctx :frontmatter]
                     loader/build]]

[defn build-queued [ctx]
      "Build queued generator content"
      :export
      [doseq [d [tree/values [tree/ref ctx :generator-queue]] ctx]
             [def raw-content [[tree/ref d :fun]]]
             [def path [get-out-path ctx [tree/ref d :path]]]
             [mkdir-safe [path/dirname path]]
             [spit path [render ctx path [tree/ref d :meta] raw-content]]]]
